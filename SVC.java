class SVC {

    private enum Kernel { LINEAR, POLY, RBF, SIGMOID }

    private int nClasses;
    private int nRows;
    private int[] classes;
    private double[][] vectors;
    private double[][] coefficients;
    private double[] intercepts;
    private int[] weights;
    private Kernel kernel;
    private double gamma;
    private double coef0;
    private double degree;

    public SVC (int nClasses, int nRows, double[][] vectors, double[][] coefficients, double[] intercepts, int[] weights, String kernel, double gamma, double coef0, double degree) {
        this.nClasses = nClasses;
        this.classes = new int[nClasses];
        for (int i = 0; i < nClasses; i++) {
            this.classes[i] = i;
        }
        this.nRows = nRows;

        this.vectors = vectors;
        this.coefficients = coefficients;
        this.intercepts = intercepts;
        this.weights = weights;

        this.kernel = Kernel.valueOf(kernel.toUpperCase());
        this.gamma = gamma;
        this.coef0 = coef0;
        this.degree = degree;
    }

    public int predict(double[] features) {
    
        double[] kernels = new double[vectors.length];
        double kernel;
        switch (this.kernel) {
            case LINEAR:
                // <x,x'>
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = kernel;
                }
                break;
            case POLY:
                // (y<x,x'>+r)^d
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = Math.pow((this.gamma * kernel) + this.coef0, this.degree);
                }
                break;
            case RBF:
                // exp(-y|x-x'|^2)
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += Math.pow(this.vectors[i][j] - features[j], 2);
                    }
                    kernels[i] = Math.exp(-this.gamma * kernel);
                }
                break;
            case SIGMOID:
                // tanh(y<x,x'>+r)
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = Math.tanh((this.gamma * kernel) + this.coef0);
                }
                break;
        }
    
        int[] starts = new int[this.nRows];
        for (int i = 0; i < this.nRows; i++) {
            if (i != 0) {
                int start = 0;
                for (int j = 0; j < i; j++) {
                    start += this.weights[j];
                }
                starts[i] = start;
            } else {
                starts[0] = 0;
            }
        }
    
        int[] ends = new int[this.nRows];
        for (int i = 0; i < this.nRows; i++) {
            ends[i] = this.weights[i] + starts[i];
        }
    
        if (this.nClasses == 2) {
    
            for (int i = 0; i < kernels.length; i++) {
                kernels[i] = -kernels[i];
            }
    
            double decision = 0.;
            for (int k = starts[1]; k < ends[1]; k++) {
                decision += kernels[k] * this.coefficients[0][k];
            }
            for (int k = starts[0]; k < ends[0]; k++) {
                decision += kernels[k] * this.coefficients[0][k];
            }
            decision += this.intercepts[0];
    
            if (decision > 0) {
                return 0;
            }
            return 1;
    
        }
    
        double[] decisions = new double[this.intercepts.length];
        for (int i = 0, d = 0, l = this.nRows; i < l; i++) {
            for (int j = i + 1; j < l; j++) {
                double tmp = 0.;
                for (int k = starts[j]; k < ends[j]; k++) {
                    tmp += this.coefficients[i][k] * kernels[k];
                }
                for (int k = starts[i]; k < ends[i]; k++) {
                    tmp += this.coefficients[j - 1][k] * kernels[k];
                }
                decisions[d] = tmp + this.intercepts[d];
                d++;
            }
        }
    
        int[] votes = new int[this.intercepts.length];
        for (int i = 0, d = 0, l = this.nRows; i < l; i++) {
            for (int j = i + 1; j < l; j++) {
                votes[d] = decisions[d] > 0 ? i : j;
                d++;
            }
        }
    
        int[] amounts = new int[this.nClasses];
        for (int i = 0, l = votes.length; i < l; i++) {
            amounts[votes[i]] += 1;
        }
    
        int classVal = -1, classIdx = -1;
        for (int i = 0, l = amounts.length; i < l; i++) {
            if (amounts[i] > classVal) {
                classVal = amounts[i];
                classIdx= i;
            }
        }
        return this.classes[classIdx];
    
    }

    public static void main(String[] args) {
        if (args.length == 4) {

            // Features:
            double[] features = new double[args.length];
            for (int i = 0, l = args.length; i < l; i++) {
                features[i] = Double.parseDouble(args[i]);
            }

            // Parameters:
            double[][] vectors = {{0.04, 16.0, 12.0, 5.0}, {0.02, 13.0, 10.0, 6.0}, {0.02, 17.0, 5.0, 8.0}, {0.03, 6.0, 6.0, 7.0}, {0.03, 8.0, 7.0, 7.0}, {0.05, 11.0, 7.0, 10.0}, {0.04, 12.0, 6.0, 9.0}, {0.05, 13.0, 1.0, 8.0}, {0.05, 9.0, 4.0, 13.0}, {0.03, 8.0, 7.0, 10.0}, {0.02, 10.0, 9.0, 5.0}, {0.02, 16.0, 10.0, 7.0}, {0.03, 12.0, 4.0, 6.0}, {0.01, 6.0, 8.0, 5.0}, {0.01, 5.0, 2.0, 1.0}, {0.01, 9.0, 1.0, 4.0}, {0.03, 7.0, 2.0, 3.0}, {0.01, 4.0, 3.0, 10.0}, {0.01, 9.0, 7.0, 4.0}, {0.01, 14.0, 4.0, 7.0}, {0.01, 11.0, 3.0, 4.0}, {0.01, 9.0, 3.0, 8.0}, {0.01, 6.0, 0.0, 5.0}, {0.01, 5.0, 1.0, 4.0}, {0.01, 8.0, 4.0, 3.0}, {0.02, 15.0, 5.0, 10.0}, {0.03, 11.0, 5.0, 7.0}, {0.05, 8.0, 6.0, 10.0}, {0.61, 12.0, 14.0, 10.0}, {0.38, 12.0, 10.0, 14.0}, {0.14, 7.0, 5.0, 9.0}, {0.25, 7.0, 8.0, 14.0}, {0.05, 18.0, 13.0, 10.0}, {0.03, 12.0, 12.0, 9.0}, {0.02, 12.0, 2.0, 5.0}, {0.02, 10.0, 8.0, 7.0}, {0.04, 18.0, 12.0, 12.0}, {0.04, 10.0, 3.0, 2.0}, {0.14, 3.0, 2.0, 2.0}, {0.02, 1.0, 2.0, 3.0}, {0.02, 3.0, 5.0, 4.0}, {0.01, 1.0, 7.0, 4.0}, {0.02, 5.0, 4.0, 2.0}, {0.02, 7.0, 9.0, 0.0}, {0.02, 3.0, 4.0, 0.0}, {0.02, 5.0, 5.0, 3.0}, {0.02, 1.0, 3.0, 5.0}, {0.03, 1.0, 3.0, 1.0}, {0.01, 3.0, 0.0, 3.0}, {0.02, 1.0, 3.0, 3.0}, {0.01, 2.0, 3.0, 0.0}, {0.02, 0.0, 6.0, 3.0}, {0.01, 1.0, 1.0, 2.0}, {0.02, 0.0, 1.0, 0.0}, {0.01, 1.0, 4.0, 0.0}, {0.02, 3.0, 1.0, 5.0}, {0.02, 2.0, 6.0, 4.0}, {0.01, 3.0, 5.0, 0.0}, {0.06, 3.0, 3.0, 0.0}, {0.03, 8.0, 7.0, 3.0}, {0.03, 2.0, 4.0, 4.0}, {0.06, 7.0, 3.0, 0.0}, {0.01, 0.0, 2.0, 3.0}, {0.02, 6.0, 3.0, 9.0}, {0.04, 6.0, 3.0, 2.0}, {0.08, 3.0, 0.0, 7.0}, {0.04, 7.0, 3.0, 4.0}, {0.02, 1.0, 3.0, 7.0}, {0.01, 2.0, 1.0, 4.0}, {0.01, 8.0, 1.0, 2.0}, {0.02, 4.0, 2.0, 7.0}, {0.03, 4.0, 2.0, 9.0}, {0.02, 9.0, 4.0, 6.0}, {0.03, 13.0, 6.0, 6.0}, {0.01, 15.0, 0.0, 3.0}, {0.02, 12.0, 7.0, 5.0}, {0.07, 10.0, 7.0, 6.0}, {0.04, 12.0, 3.0, 1.0}, {0.04, 11.0, 4.0, 9.0}, {0.05, 16.0, 5.0, 7.0}, {0.05, 4.0, 6.0, 9.0}, {0.04, 6.0, 3.0, 6.0}, {0.04, 2.0, 4.0, 8.0}, {0.01, 1.0, 2.0, 0.0}, {0.02, 8.0, 5.0, 4.0}, {0.01, 4.0, 1.0, 4.0}, {0.04, 3.0, 0.0, 8.0}, {0.05, 5.0, 3.0, 3.0}, {0.12, 9.0, 6.0, 12.0}, {0.17, 11.0, 6.0, 11.0}, {0.04, 12.0, 1.0, 4.0}, {0.01, 11.0, 5.0, 6.0}, {0.1, 15.0, 4.0, 3.0}, {0.03, 15.0, 8.0, 5.0}, {0.11, 12.0, 8.0, 9.0}, {0.55, 7.0, 4.0, 7.0}, {0.04, 11.0, 6.0, 6.0}, {0.01, 15.0, 4.0, 7.0}, {0.54, 10.0, 12.0, 11.0}, {0.12, 5.0, 3.0, 13.0}, {0.04, 13.0, 15.0, 8.0}, {0.08, 8.0, 9.0, 7.0}, {0.07, 4.0, 1.0, 9.0}, {0.06, 8.0, 8.0, 5.0}, {0.07, 7.0, 7.0, 2.0}, {0.02, 5.0, 0.0, 0.0}, {0.05, 9.0, 4.0, 11.0}, {0.07, 4.0, 3.0, 5.0}, {0.07, 3.0, 4.0, 11.0}, {0.02, 5.0, 5.0, 5.0}, {0.06, 5.0, 11.0, 8.0}, {0.11, 12.0, 9.0, 8.0}, {0.1, 12.0, 4.0, 12.0}, {0.17, 12.0, 11.0, 10.0}, {0.2, 8.0, 12.0, 9.0}, {0.13, 5.0, 5.0, 8.0}, {0.05, 6.0, 8.0, 5.0}, {0.27, 9.0, 9.0, 0.0}, {0.07, 10.0, 13.0, 0.0}, {0.07, 6.0, 10.0, 12.0}, {0.1, 11.0, 10.0, 11.0}, {0.07, 8.0, 5.0, 0.0}, {0.04, 5.0, 4.0, 11.0}, {0.02, 7.0, 3.0, 7.0}, {0.06, 4.0, 9.0, 11.0}, {0.05, 17.0, 11.0, 0.0}, {0.04, 6.0, 8.0, 7.0}, {0.06, 7.0, 12.0, 9.0}, {0.09, 11.0, 11.0, 7.0}, {0.08, 14.0, 12.0, 0.0}, {0.09, 16.0, 10.0, 11.0}, {0.07, 18.0, 1.0, 9.0}, {0.03, 15.0, 6.0, 9.0}, {0.01, 11.0, 5.0, 9.0}, {0.04, 8.0, 7.0, 7.0}, {0.04, 15.0, 5.0, 0.0}, {0.02, 6.0, 3.0, 7.0}, {1.7, 5.0, 9.0, 8.0}, {0.08, 9.0, 9.0, 10.0}, {0.15, 8.0, 5.0, 5.0}, {0.06, 7.0, 10.0, 7.0}, {0.06, 16.0, 10.0, 7.0}, {0.04, 16.0, 10.0, 10.0}, {0.07, 10.0, 10.0, 8.0}, {0.04, 17.0, 8.0, 8.0}, {0.03, 13.0, 5.0, 8.0}, {0.04, 14.0, 6.0, 11.0}, {0.01, 15.0, 6.0, 2.0}, {0.02, 17.0, 4.0, 11.0}, {0.01, 10.0, 1.0, 6.0}, {0.02, 6.0, 7.0, 6.0}, {0.03, 6.0, 1.0, 6.0}, {0.0, 1.0, 2.0, 1.0}, {0.0, 4.0, 1.0, 0.0}, {0.0, 1.0, 1.0, 1.0}, {0.0, 5.0, 3.0, 2.0}, {0.0, 1.0, 1.0, 3.0}, {0.0, 1.0, 1.0, 2.0}, {0.0, 1.0, 3.0, 2.0}, {0.0, 4.0, 3.0, 1.0}, {0.0, 6.0, 3.0, 1.0}, {0.0, 3.0, 5.0, 0.0}, {0.0, 1.0, 5.0, 0.0}, {0.0, 1.0, 1.0, 1.0}, {0.0, 3.0, 1.0, 3.0}, {0.0, 4.0, 5.0, 3.0}, {0.0, 4.0, 7.0, 2.0}, {0.0, 1.0, 3.0, 3.0}, {0.0, 2.0, 4.0, 1.0}, {0.0, 1.0, 3.0, 3.0}, {0.0, 5.0, 1.0, 1.0}, {0.0, 2.0, 3.0, 0.0}, {0.0, 3.0, 2.0, 2.0}, {0.0, 4.0, 5.0, 3.0}, {0.0, 4.0, 3.0, 3.0}, {0.0, 1.0, 3.0, 1.0}, {0.0, 1.0, 1.0, 1.0}, {0.0, 2.0, 4.0, 1.0}, {0.0, 5.0, 4.0, 1.0}, {0.0, 1.0, 7.0, 1.0}, {0.0, 1.0, 3.0, 0.0}, {0.0, 9.0, 0.0, 1.0}, {0.0, 6.0, 2.0, 1.0}, {0.0, 0.0, 4.0, 1.0}, {0.0, 9.0, 8.0, 1.0}, {0.0, 11.0, 0.0, 1.0}, {0.0, 0.0, 0.0, 1.0}, {0.0, 0.0, 0.0, 1.0}, {0.0, 8.0, 4.0, 1.0}, {0.0, 2.0, 0.0, 1.0}, {0.0, 6.0, 0.0, 1.0}, {0.0, 0.0, 7.0, 2.0}, {0.0, 0.0, 9.0, 1.0}, {0.0, 0.0, 5.0, 2.0}, {0.0, 0.0, 5.0, 0.0}, {0.0, 0.0, 8.0, 0.0}, {0.0, 0.0, 10.0, 0.0}, {0.0, 0.0, 7.0, 0.0}, {0.0, 0.0, 4.0, 1.0}, {0.0, 0.0, 3.0, 0.0}, {0.0, 0.0, 13.0, 0.0}, {0.0, 0.0, 8.0, 5.0}, {0.0, 1.0, 5.0, 0.0}, {0.0, 5.0, 0.0, 3.0}, {0.0, 3.0, 0.0, 3.0}, {0.0, 7.0, 2.0, 1.0}, {0.0, 3.0, 2.0, 1.0}, {0.0, 9.0, 0.0, 1.0}, {0.0, 7.0, 0.0, 1.0}, {0.0, 3.0, 0.0, 1.0}, {4.18, 11.0, 10.0, 0.0}, {5.17, 12.0, 16.0, 17.0}, {4.84, 16.0, 18.0, 17.0}, {5.06, 13.0, 15.0, 0.0}, {5.72, 10.0, 14.0, 0.0}, {5.53, 9.0, 14.0, 0.0}, {4.47, 11.0, 14.0, 16.0}, {6.21, 11.0, 12.0, 18.0}, {5.68, 11.0, 17.0, 0.0}, {7.3, 14.0, 18.0, 0.0}, {10.76, 12.0, 20.0, 0.0}, {7.18, 15.0, 16.0, 19.0}, {8.29, 14.0, 19.0, 0.0}, {7.38, 14.0, 17.0, 17.0}, {6.72, 12.0, 19.0, 0.0}, {7.61, 17.0, 17.0, 19.0}, {6.32, 9.0, 19.0, 18.0}, {6.8, 9.0, 17.0, 0.0}, {7.94, 16.0, 14.0, 18.0}, {6.94, 9.0, 11.0, 0.0}, {5.77, 10.0, 14.0, 16.0}, {5.45, 8.0, 18.0, 0.0}, {7.64, 12.0, 16.0, 0.0}, {6.85, 13.0, 13.0, 0.0}, {7.03, 9.0, 19.0, 0.0}, {7.16, 11.0, 19.0, 18.0}, {9.56, 16.0, 13.0, 19.0}, {9.11, 18.0, 18.0, 0.0}, {9.37, 12.0, 19.0, 17.0}, {14.78, 14.0, 14.0, 0.0}, {12.28, 11.0, 13.0, 19.0}, {6.61, 18.0, 19.0, 18.0}, {7.61, 11.0, 15.0, 17.0}, {2.76, 7.0, 8.0, 7.0}, {5.72, 15.0, 14.0, 15.0}, {5.14, 11.0, 13.0, 18.0}, {6.13, 15.0, 17.0, 19.0}, {7.18, 12.0, 0.0, 18.0}, {8.77, 9.0, 0.0, 19.0}, {5.43, 9.0, 18.0, 18.0}, {9.51, 11.0, 16.0, 13.0}, {5.67, 12.0, 11.0, 19.0}, {6.12, 15.0, 14.0, 17.0}, {5.99, 14.0, 0.0, 15.0}, {4.04, 14.0, 0.0, 20.0}, {3.74, 12.0, 14.0, 14.0}, {4.79, 14.0, 7.0, 0.0}, {9.12, 15.0, 14.0, 18.0}, {8.33, 13.0, 17.0, 19.0}, {8.78, 12.0, 13.0, 19.0}, {7.81, 15.0, 11.0, 19.0}, {4.05, 15.0, 12.0, 19.0}, {13.92, 10.0, 18.0, 19.0}, {8.04, 11.0, 15.0, 19.0}, {8.06, 11.0, 0.0, 18.0}, {9.79, 10.0, 16.0, 18.0}, {10.34, 9.0, 12.0, 19.0}, {11.5, 9.0, 0.0, 19.0}, {12.73, 9.0, 15.0, 19.0}, {5.99, 13.0, 15.0, 19.0}, {7.28, 13.0, 0.0, 19.0}, {10.93, 9.0, 16.0, 19.0}, {6.52, 18.0, 0.0, 19.0}, {4.31, 11.0, 16.0, 19.0}, {8.41, 12.0, 0.0, 20.0}, {10.46, 13.0, 0.0, 19.0}, {5.09, 10.0, 17.0, 19.0}, {11.56, 10.0, 0.0, 18.0}, {7.91, 9.0, 17.0, 19.0}, {6.76, 13.0, 0.0, 15.0}, {11.71, 14.0, 17.0, 18.0}, {7.94, 9.0, 13.0, 18.0}, {12.33, 12.0, 0.0, 16.0}, {7.43, 14.0, 0.0, 18.0}, {5.52, 11.0, 10.0, 19.0}, {6.95, 11.0, 0.0, 20.0}, {4.36, 12.0, 0.0, 20.0}, {4.14, 12.0, 0.0, 19.0}, {8.2, 17.0, 14.0, 19.0}, {6.01, 11.0, 0.0, 18.0}, {5.01, 14.0, 16.0, 19.0}, {9.67, 16.0, 17.0, 19.0}, {5.48, 16.0, 0.0, 19.0}, {9.22, 12.0, 0.0, 20.0}, {8.89, 18.0, 0.0, 19.0}, {6.6, 14.0, 0.0, 19.0}, {4.6, 10.0, 0.0, 19.0}, {3.96, 15.0, 0.0, 19.0}, {6.15, 17.0, 0.0, 19.0}, {4.84, 16.0, 15.0, 19.0}, {9.44, 14.0, 9.0, 19.0}, {11.04, 14.0, 15.0, 19.0}, {7.49, 12.0, 17.0, 19.0}, {9.23, 14.0, 0.0, 20.0}, {9.87, 11.0, 0.0, 20.0}, {4.77, 10.0, 0.0, 20.0}, {9.65, 16.0, 0.0, 19.0}, {8.82, 16.0, 0.0, 17.0}, {10.13, 14.0, 0.0, 19.0}, {9.72, 14.0, 13.0, 22.0}, {7.85, 14.0, 10.0, 19.0}, {8.61, 13.0, 15.0, 17.0}, {6.25, 15.0, 0.0, 18.0}, {11.03, 11.0, 17.0, 18.0}, {4.59, 11.0, 14.0, 19.0}, {13.07, 11.0, 0.0, 19.0}, {7.16, 14.0, 15.0, 19.0}, {8.59, 6.0, 0.0, 15.0}, {4.91, 15.0, 12.0, 0.0}, {10.7, 11.0, 14.0, 18.0}, {8.14, 9.0, 14.0, 20.0}, {7.97, 14.0, 19.0, 19.0}, {10.33, 12.0, 17.0, 20.0}, {5.75, 13.0, 18.0, 19.0}, {4.61, 19.0, 18.0, 19.0}, {4.33, 17.0, 18.0, 19.0}, {5.53, 19.0, 0.0, 19.0}, {5.43, 19.0, 18.0, 19.0}, {9.38, 13.0, 0.0, 17.0}, {9.47, 9.0, 0.0, 18.0}, {12.83, 13.0, 0.0, 20.0}, {10.65, 19.0, 0.0, 18.0}, {3.77, 18.0, 16.0, 19.0}, {11.78, 9.0, 0.0, 20.0}, {4.76, 20.0, 0.0, 20.0}, {6.13, 9.0, 0.0, 20.0}, {12.68, 9.0, 0.0, 20.0}, {12.06, 14.0, 15.0, 13.0}, {5.86, 20.0, 0.0, 20.0}, {11.05, 11.0, 0.0, 16.0}, {9.87, 10.0, 0.0, 20.0}, {11.26, 19.0, 0.0, 19.0}, {8.24, 15.0, 0.0, 20.0}, {10.11, 17.0, 17.0, 17.0}, {11.84, 14.0, 0.0, 17.0}, {11.36, 13.0, 15.0, 19.0}, {11.15, 13.0, 14.0, 17.0}, {11.41, 15.0, 16.0, 16.0}, {6.22, 13.0, 16.0, 15.0}, {5.69, 10.0, 16.0, 16.0}};
            double[][] coefficients = {{0.20030033913554857, 0.1296668682759402, 0.1250867592893632, 0.07835856307247153, 0.0731147357113231, 0.04628680122578419, 0.026320393090044417, 0.20227385320149924, 0.14947957565840153, 0.0967617524929312, 0.14167952624599214, 0.0052061657534187905, 0.09609891990264993, 0.15278872133435203, 55.648062646034965, 0.0, 0.0, 0.0019428265336740688, 0.0, 0.01480334725539769, 0.0, 0.11284077644557329, 0.0, 0.0032728830612738795, 0.0, 0.024997443012483262, 0.014522177237825304, 0.025862906877188816, 0.14407602956351517, 0.21397073884282242, 0.06462603080217265, 0.19898817658393977, 0.17139347313054812, 0.0702744492463409, 0.0, 0.053538599225859795, 0.1567875514800147, 0.9652132306086478, 100.0, 23.864733482340103, 3.6490414869880103, 0.028818239908179718, 27.44579621874219, 0.1591151799005045, 3.9937349545675564, 0.0, 0.0, 100.0, 100.0, 100.0, 100.0, 3.3332666337883383, 100.0, 0.0, 66.93287213668717, 0.0, 0.0, 100.0, 5.407038986421758, 0.8368650851000864, 3.233017852259118, 9.625855125434251, 3.5670409912863508, 0.12068791002302116, 20.26282480638788, 0.0, 0.0, 0.0, 9.392698470058692, 3.3023628536819674, 0.0, 0.0, 0.07601004337983355, 0.05104573833320403, 0.21503411140616224, 0.11395489415971587, 0.0067850666538137845, 0.09631535445135334, 0.10591578656899465, 0.02658268816385442, 0.14791644857428046, 0.0, 0.08483506089526281, 63.903709228153524, 0.0, 2.5251375012433974, 0.031232976696452183, 5.676792415830057, 0.08423882785205357, 0.05300562231683419, 0.20325166153140162, 0.0235381096744973, 0.15949574140080477, 0.16411582945280687, 0.10070785757708339, 0.03764912264565088, 0.025227332052980677, 0.1163280672197206, 0.1349141894436309, 0.18684437592336006, 0.18806714234073285, 0.035393070740289, 0.1710192864838913, 0.0, 0.019421565403352957, 11.18193395406297, 0.07296551397224774, 0.0, 0.15235084461852985, 0.0, 0.13888940694699436, 0.03582944427769514, 0.16192655673490275, 0.0586000184392372, 0.10227684139886949, 0.009204961801260274, 0.0, 2.088537308472631, 0.19542242443312569, 0.1531891950622878, 0.08239659625953141, 2.473818462233456, 0.051611488405993694, 0.025710063516638022, 0.16968001679826347, 0.2067898521505337, 0.0, 0.08191625293152945, 0.11595999454426459, 0.20399695084966632, 0.13977782197339333, 0.21602344310238142, 0.06375676140450434, 0.001470922260535103, 0.0, 0.17386237292449672, 0.0, 0.16004173669326655, 0.10852115797311247, 0.0, 0.08941930505568807, 0.11715551643553418, 0.06752467025383296, 0.031284638463370096, 0.15409295376963053, 0.05447296400282748, 0.14258184934452267, 0.11977435551353302, 0.19127878629477926, 0.13839377444179807, 0.033320625842894545, 0.0, -34.291225998657644, -11.333105602397954, -0.441428889756517, -42.77729278729629, -35.56261134899015, -63.11395103153848, -7.9138882276231595, -9.203924948475118, -15.667739274694743, -100.0, -1.016754970337808, -2.18380086463481, -14.036081381380772, -0.43861132111214596, -0.5567124497708599, -16.737052415568307, -1.7393477125424845, -99.93152784184451, -22.945375860033742, -100.0, -87.53641990171117, -8.533314056824546, -0.0, -55.217384591865084, -22.798064177524942, -9.756899459958632, -6.978008567199026, -0.0, -94.65903790711306, -0.14507648210143617, -18.628619476702898, -1.4197175001209366, -3.3232172941449325, -1.1006880148190963, -0.24620612191250166, -0.26076957812095714, -6.4551234570521485, -0.0, -0.0, -1.4504259815547453, -0.42764210953728843, -0.0, -0.0, -0.0, -1.2574949900242622, -0.0, -6.9433317444972, -0.0, -1.6370995949950577, -2.1413371678206197, -25.446122408416723, -0.0, -95.25429950231813, -0.0, -5.120273875384714, -2.4676047057611994, -0.0, -0.0, -0.9196735171414657, -0.146337039984673, -0.6846383579222183, -0.6716127903402445, -0.2140595491819524, -0.6812946104865831, -0.2638134897566484, -0.3357335757623598, -0.3894539778970851, -0.37351219519031764, -0.9284944987297713, -0.027770557312486625, -0.5454785211473505, -0.34880788299530724, -0.5394413317562579, -0.46818014496091276, -0.5082181869643962, -0.29794827251099276, -0.0685737147108321, -0.8748400884646215, -0.39454720144087285, -0.6283075830841637, -0.594965380709475, -0.6917480111721818, -0.5629547396250552, -0.38547775138198864, -0.4872441793141675, -0.9653929198925649, -0.7207206697148691, -0.9748777207069128, -0.6767780258662569, -0.6326010082957619, -0.2672124253401957, -1.315752957807936, -0.7169417860720119, -0.06447172113291968, -0.02694657472566218, -0.19137600642778455, -0.22517554914808316, -0.27980216642397715, -0.946853638453019, -0.2424807157268303, -0.34206327472370485, -0.5763801391212985, -0.3690152947362106, -0.8253359502195837, -0.9654928046521783, -0.12726929095895126, -0.01610331887816362, -0.5305318830590091, -0.5500745828521829, -0.8793919564849415, -0.8976270557050977, -0.11256231159458827, -0.15432001324254152, -0.20702557965975338, -0.7115466732212191, -0.026377427767448454, -0.6324294294461522, -0.1360258651835651, -0.0011527780088177186, -0.4002727920160038, -0.26727294296079973, -0.3908449660666126, -0.28215748621264924, -0.09218250895381362, -0.299434858040803, -0.19237382436892914, -0.5723367408226653, -0.5023237684689145, -0.5067267446925293, -0.5005629454378125, -0.4482230641059228, -0.010136436284070228, -0.7082468786027291, -0.17135328560148302, -0.3374113893229998, -0.25165333643075244, -0.5479239910223084, -0.3232337248038001, -0.3308696771367457, -0.4253186827512144, -0.09346096669650869, -0.060736221163367174, -0.42871274301716167, -0.18384803930133453, -0.32614359303990637, -0.5178760198030216, -0.2923943036003893, -0.4685070988215516, -0.7880267421022658, -0.3381829544408391, -0.14956597424400966, -0.2970857412566386, -0.22794495638563306, -0.10713074052842607, -0.2468678902821586, -0.6175687836473577, -0.06611755522222391, -0.9096469730591679, -0.22796491049888634, -0.34517746393989623, -0.2996746617499518, -0.3258177208243912, -0.5354806777700417, -0.3802433279597882, -0.2784692913208078, -0.9695153470450846, -0.8672683156848151, -0.09584236918000252, -0.6021909797607965, -0.6347801971858951, -0.6338368438959546, -0.47021390599296864, -0.4423287116688297, -0.2548089359981932, -0.16726995294466881, -0.15848392216833562, -0.43653602307358624, -0.5063311978913309, -0.748610365281475, -0.389941900020528, -0.628044221543949, -0.08960121848296411, -0.5838574675357411, -0.6181907612869143, -0.670627539879388, -0.9195935331834496, -0.3375658888533144, -0.5066609078970058, -0.2249583704847156, -0.5948539371875385, -0.3793570236153713, -0.6753601063952138, -0.6095891046641044, -0.0725513733552644, -0.5616815307942153, -0.5903394569961209, -0.6022898377109991, -0.4861615922999519}, {0.9151911673923019, 0.5956652711151539, 0.570788085042324, 0.3218509713559813, 0.0, 0.21747658240916565, 0.1237940255627789, 0.9246678828955968, 0.6844137383834109, 0.4386833755626648, 0.5698887132786261, 0.2569077539760902, 0.36707584739159127, 0.0, 0.22515514780021717, 0.36937532612580964, 0.01447695692554768, 0.04403424960218026, 0.4653697949736955, 0.10359062469974745, 0.3079835791751915, 0.5185590398537628, 0.6333835495302992, 0.12812295590969355, 0.2959683488109114, 0.1171857609401717, 0.12039197018635409, 0.11355082468880223, 0.6606702496904285, 0.9779976874534876, 0.3011672165418389, 0.9118406171770852, 0.7851276833519858, 0.32223834488579284, 0.09490348404331891, 0.2248265072820215, 0.7171356373425757, 0.38904621127377265, 0.25317789218681136, 0.0, 0.3429428055886311, 0.5792089241442624, 0.25867884576858463, 0.6673589378623379, 0.0, 0.30294611180951686, 0.3765328964602702, 0.0, 0.6315420890104486, 0.04500879711521995, 0.0, 0.6257548667057596, 0.13532478004714624, 0.8413661652079789, 0.595739147231037, 0.230212819482601, 0.12591504029374354, 0.6395728825613438, 0.34944567817050703, 0.0942021541209256, 0.13200805319623313, 0.5687414512362091, 0.6422121850524117, 0.49134068160770383, 0.024843677867197947, 0.44138452996641, 0.24951901580398417, 0.5238245142202587, 0.11099583631691953, 0.6471314546118561, 0.15034018273332111, 0.012971857463053578, 0.30596313629845906, 0.26154507885091294, 0.9666239679639559, 0.49475525448993185, 0.014283510276236524, 0.7973852205006304, 0.4860680900610282, 0.1349178313779016, 0.6503023383061267, 0.17096765732925423, 0.5401447750088537, 0.018526334134431756, 0.10746866900451299, 0.0, 0.30614104429146194, 0.13021173370519018, 0.3882047894978285, 0.23988257361585616, 0.6028129841829908, 0.06318542092751184, 0.7237446462450133, 0.7496341623861081, 0.45014981880568433, 0.14341680574298546, 0.11423694380792643, 0.49850284558657826, 0.61863881173262, 0.8561582159487743, 0.861783635723321, 0.27400689444662896, 0.5633820565636382, 0.00491285620031502, 0.5623304544049273, 0.8575871955277286, 0.33619648340197317, 0.2817037194263349, 0.6679954593878953, 0.3458093323854253, 0.5982436428059337, 0.17777471782294585, 0.7400886533966431, 0.26541091049490717, 0.4539442145988968, 0.08292095202789855, 0.6943440522944241, 0.7303198336112321, 1.0012045845134006, 0.6999707338199839, 0.38039383599845017, 0.7040763850687265, 0.24396862901444427, 0.08694761812220396, 0.7706895917778446, 0.9482321547998895, 0.13443274716268946, 0.3949606830627402, 0.5382656968979707, 0.934802331401705, 0.6395145614732182, 0.988548352003559, 0.289390577925494, 0.0, 0.44048026717101263, 0.7842235567708007, 0.08971847738620972, 0.9351109856367316, 0.4949809626056824, 0.2057210795815602, 0.37319598611065696, 0.3027112783218238, 0.30827636926163837, 0.1302298079821733, 0.7060346789042939, 0.2352444481682468, 0.6524515462527061, 0.550450376940479, 0.8742950991701591, 0.6163730065768177, 0.0, 0.23771130897633502, 0.0, 1.0078522065584687, 0.0, 0.0, 0.6267903655542809, 0.0, 0.0, 0.0, 0.2277597172519105, 0.9389584925925174, 0.0, 0.0, 0.0, 0.0, 1.2250408261859078, 0.0, 0.0, 0.878058314654235, 0.0, 0.5145765512304308, 0.0, 0.676907985751827, 0.8063532754142143, 0.0, 0.0, 0.0, 0.5263849382098135, 0.06242223301540508, 0.0, 0.0, 0.0, 0.0, 1.5836048640338845, 1.3099003945316874, 0.0, 1.1728088816759565, 1.2968511548595179, 0.3122773219102306, 0.22994987053355387, 0.6252242363481003, 0.45359212576102237, 0.6587633466600693, 0.4577507883627957, 0.10930371006781542, 1.0273222775991009, 0.6851672820469005, 0.0, 0.893327702684233, 1.4883389462371375, 1.5326401796194116, 0.0, 0.9733422167543266, 0.6720571331575446, 0.438407023666877, 0.0, 0.7452920370066853, 0.7159470732922828, 0.18959773999728252, -0.3737017699657452, -0.05970117493045181, -0.27897532105662615, -0.2731168689787479, -0.08791425722645757, -0.2765514940906839, -0.10849594243227208, -0.13801074119288134, -0.15810547879191006, -0.15147373143497872, -0.3778182378369625, -0.011176572856096516, -0.22265993975018164, -0.14208643150211295, -0.2196136562674919, -0.1906231400537549, -0.20820933699101346, -0.12142066600250981, -0.027006671939729825, -0.3560006996480072, -0.1603316265275242, -0.2559867354371137, -0.24261538126878932, -0.28152550591166803, -0.22857761793571263, -0.15584664441282978, -0.19816472696424103, -0.3928118497358027, -0.29380744691797417, -0.3965757065493315, -0.2756153045121404, -0.257251819849496, -0.1083438979802899, -0.39671213797263705, -0.29177826334624213, -0.02416966958324083, -0.010141587853750071, -0.07522170555428298, -0.09313980977737446, -0.1117962949918283, -0.3852711170848367, -0.09828663126108401, -0.13921826487465538, -0.23513602802380082, -0.15126278534661924, -0.3344643443862996, -0.3921757679367547, -0.05228884363248065, -0.00571349516278358, -0.21549471489193658, -0.22436196461022373, -0.35803059207078214, -0.36536647383571286, -0.0460603039395819, -0.06409801581526658, -0.0847494697461636, -0.2894574954891435, -0.009017408070115722, -0.25748565095091097, -0.05430912075915349, -0.0, -0.1621349407441838, -0.11386786632243344, -0.15709092010881154, -0.12269385070306116, -0.04094332251272546, -0.12390082763267984, -0.07912066995969061, -0.23231502898246853, -0.20381992642173333, -0.206410341790646, -0.20373593066271004, -0.18266039734018744, -0.007186138441306101, -0.2884195466196087, -0.06808683843345607, -0.13659227970602045, -0.10320938353701574, -0.223352027020942, -0.13303826328911006, -0.13598920620348753, -0.17313275543423293, -0.04339454683006515, -0.014228869324660387, -0.17327243590174443, -0.07355784278585964, -0.13124715515821342, -0.20840303798540308, -0.11250965901056148, -0.1906629945723662, -0.3207911974684276, -0.13730926579575392, -0.0617647106000088, -0.12367658963988988, -0.09704876111698606, -0.04504364866821519, -0.10179208501642897, -0.25085122913121605, -0.02353621222927307, -0.37016463943878963, -0.09202554828849874, -0.14013224219022255, -0.12033531271945623, -0.13225024569131666, -0.21942799342126998, -0.15471108234134534, -0.1143700088949548, -0.39471885461872697, -0.35156783976391215, -0.03952579552266427, -0.2452482970278298, -0.25839392545078727, -0.2577761490405123, -0.19120598481771459, -0.18065273766263967, -0.10301044302379996, -0.06584931566697222, -0.06433043118432669, -0.1769754503449182, -0.20483361362811905, -0.3041820332678402, -0.15905636529898376, -0.2554958703424516, -0.03886540266593663, -0.23969038840197243, -0.2509535187537085, -0.2717171581936383, -0.3741623570648543, -0.13601224530022904, -0.2057336359622789, -0.0890030480305725, -0.24197003216040502, -0.15261778175571897, -0.27441092029170683, -0.24805270055719109, -0.02975635659652957, -0.22817339576749726, -0.24048270449358694, -0.24494118719021915, -0.19767314337055508}};
            double[] intercepts = {0.7758968531355508, -0.02507727678626588, -0.6033194795721486};
            int[] weights = {152, 58, 140};

            // Prediction:
            SVC clf = new SVC(3, 3, vectors, coefficients, intercepts, weights, "rbf", 0.25, 0.0, 3);
            int estimation = clf.predict(features);
            System.out.println(estimation);

        }
    }
}