class SVC {

    private enum Kernel { LINEAR, POLY, RBF, SIGMOID }

    private int nClasses;
    private int nRows;
    private int[] classes;
    private double[][] vectors;
    private double[][] coefficients;
    private double[] intercepts;
    private int[] weights;
    private Kernel kernel;
    private double gamma;
    private double coef0;
    private double degree;

    public SVC (int nClasses, int nRows, double[][] vectors, double[][] coefficients, double[] intercepts, int[] weights, String kernel, double gamma, double coef0, double degree) {
        this.nClasses = nClasses;
        this.classes = new int[nClasses];
        for (int i = 0; i < nClasses; i++) {
            this.classes[i] = i;
        }
        this.nRows = nRows;

        this.vectors = vectors;
        this.coefficients = coefficients;
        this.intercepts = intercepts;
        this.weights = weights;

        this.kernel = Kernel.valueOf(kernel.toUpperCase());
        this.gamma = gamma;
        this.coef0 = coef0;
        this.degree = degree;
    }

    public int predict(double[] features) {
    
        double[] kernels = new double[vectors.length];
        double kernel;
        switch (this.kernel) {
            case LINEAR:
                // <x,x'>
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = kernel;
                }
                break;
            case POLY:
                // (y<x,x'>+r)^d
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = Math.pow((this.gamma * kernel) + this.coef0, this.degree);
                }
                break;
            case RBF:
                // exp(-y|x-x'|^2)
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += Math.pow(this.vectors[i][j] - features[j], 2);
                    }
                    kernels[i] = Math.exp(-this.gamma * kernel);
                }
                break;
            case SIGMOID:
                // tanh(y<x,x'>+r)
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = Math.tanh((this.gamma * kernel) + this.coef0);
                }
                break;
        }
    
        int[] starts = new int[this.nRows];
        for (int i = 0; i < this.nRows; i++) {
            if (i != 0) {
                int start = 0;
                for (int j = 0; j < i; j++) {
                    start += this.weights[j];
                }
                starts[i] = start;
            } else {
                starts[0] = 0;
            }
        }
    
        int[] ends = new int[this.nRows];
        for (int i = 0; i < this.nRows; i++) {
            ends[i] = this.weights[i] + starts[i];
        }
    
        if (this.nClasses == 2) {
    
            for (int i = 0; i < kernels.length; i++) {
                kernels[i] = -kernels[i];
            }
    
            double decision = 0.;
            for (int k = starts[1]; k < ends[1]; k++) {
                decision += kernels[k] * this.coefficients[0][k];
            }
            for (int k = starts[0]; k < ends[0]; k++) {
                decision += kernels[k] * this.coefficients[0][k];
            }
            decision += this.intercepts[0];
    
            if (decision > 0) {
                return 0;
            }
            return 1;
    
        }
    
        double[] decisions = new double[this.intercepts.length];
        for (int i = 0, d = 0, l = this.nRows; i < l; i++) {
            for (int j = i + 1; j < l; j++) {
                double tmp = 0.;
                for (int k = starts[j]; k < ends[j]; k++) {
                    tmp += this.coefficients[i][k] * kernels[k];
                }
                for (int k = starts[i]; k < ends[i]; k++) {
                    tmp += this.coefficients[j - 1][k] * kernels[k];
                }
                decisions[d] = tmp + this.intercepts[d];
                d++;
            }
        }
    
        int[] votes = new int[this.intercepts.length];
        for (int i = 0, d = 0, l = this.nRows; i < l; i++) {
            for (int j = i + 1; j < l; j++) {
                votes[d] = decisions[d] > 0 ? i : j;
                d++;
            }
        }
    
        int[] amounts = new int[this.nClasses];
        for (int i = 0, l = votes.length; i < l; i++) {
            amounts[votes[i]] += 1;
        }
    
        int classVal = -1, classIdx = -1;
        for (int i = 0, l = amounts.length; i < l; i++) {
            if (amounts[i] > classVal) {
                classVal = amounts[i];
                classIdx= i;
            }
        }
        return this.classes[classIdx];
    
    }

    public static void main(String[] args) {
        if (args.length == 4) {

            // Features:
            double[] features = new double[args.length];
            for (int i = 0, l = args.length; i < l; i++) {
                features[i] = Double.parseDouble(args[i]);
            }

            // Parameters:
            double[][] vectors = {{0.01, 10.0, 3.0, 5.0}, {0.04, 16.0, 12.0, 5.0}, {0.02, 13.0, 10.0, 6.0}, {0.02, 17.0, 5.0, 8.0}, {0.02, 11.0, 7.0, 6.0}, {0.03, 6.0, 6.0, 7.0}, {0.03, 8.0, 7.0, 7.0}, {0.05, 11.0, 7.0, 10.0}, {0.04, 12.0, 6.0, 9.0}, {0.05, 13.0, 1.0, 8.0}, {0.05, 9.0, 4.0, 13.0}, {0.03, 8.0, 7.0, 10.0}, {0.02, 10.0, 9.0, 5.0}, {0.02, 16.0, 10.0, 7.0}, {0.03, 12.0, 4.0, 6.0}, {0.01, 6.0, 8.0, 5.0}, {0.01, 5.0, 2.0, 1.0}, {0.01, 9.0, 1.0, 4.0}, {0.03, 7.0, 2.0, 3.0}, {0.01, 15.0, 5.0, 8.0}, {0.01, 10.0, 2.0, 5.0}, {0.01, 4.0, 3.0, 10.0}, {0.01, 9.0, 7.0, 4.0}, {0.01, 14.0, 4.0, 7.0}, {0.01, 7.0, 5.0, 4.0}, {0.01, 11.0, 3.0, 4.0}, {0.01, 9.0, 3.0, 8.0}, {0.01, 6.0, 0.0, 5.0}, {0.01, 5.0, 1.0, 4.0}, {0.01, 8.0, 4.0, 3.0}, {0.02, 15.0, 5.0, 10.0}, {0.03, 11.0, 5.0, 7.0}, {0.05, 8.0, 6.0, 10.0}, {0.61, 12.0, 14.0, 10.0}, {0.38, 12.0, 10.0, 14.0}, {0.14, 7.0, 5.0, 9.0}, {0.25, 7.0, 8.0, 14.0}, {0.05, 18.0, 13.0, 10.0}, {0.03, 12.0, 12.0, 9.0}, {0.02, 12.0, 2.0, 5.0}, {0.02, 10.0, 8.0, 7.0}, {0.04, 18.0, 12.0, 12.0}, {0.04, 10.0, 3.0, 2.0}, {0.0, 0.0, 5.0, 1.0}, {0.0, 1.0, 5.0, 2.0}, {0.0, 4.0, 1.0, 0.0}, {0.0, 5.0, 3.0, 2.0}, {0.0, 1.0, 1.0, 3.0}, {0.0, 4.0, 3.0, 1.0}, {0.0, 6.0, 3.0, 1.0}, {0.0, 3.0, 5.0, 0.0}, {0.0, 1.0, 5.0, 0.0}, {0.0, 1.0, 1.0, 1.0}, {0.0, 3.0, 1.0, 3.0}, {0.0, 4.0, 7.0, 2.0}, {0.0, 1.0, 3.0, 3.0}, {0.0, 5.0, 1.0, 1.0}, {0.0, 2.0, 3.0, 0.0}, {0.0, 4.0, 5.0, 3.0}, {0.0, 4.0, 3.0, 3.0}, {0.0, 1.0, 1.0, 1.0}, {0.0, 5.0, 4.0, 1.0}, {0.0, 1.0, 7.0, 1.0}, {0.0, 1.0, 3.0, 0.0}, {4.18, 11.0, 10.0, 0.0}, {5.17, 12.0, 16.0, 17.0}, {4.84, 16.0, 18.0, 17.0}, {5.06, 13.0, 15.0, 0.0}, {5.72, 10.0, 14.0, 0.0}, {5.53, 9.0, 14.0, 0.0}, {4.47, 11.0, 14.0, 16.0}, {6.21, 11.0, 12.0, 18.0}, {5.68, 11.0, 17.0, 0.0}, {7.3, 14.0, 18.0, 0.0}, {10.76, 12.0, 20.0, 0.0}, {7.18, 15.0, 16.0, 19.0}, {8.29, 14.0, 19.0, 0.0}, {7.38, 14.0, 17.0, 17.0}, {6.72, 12.0, 19.0, 0.0}, {7.61, 17.0, 17.0, 19.0}, {6.32, 9.0, 19.0, 18.0}, {6.8, 9.0, 17.0, 0.0}, {7.94, 16.0, 14.0, 18.0}, {6.94, 9.0, 11.0, 0.0}, {5.77, 10.0, 14.0, 16.0}, {5.45, 8.0, 18.0, 0.0}, {7.64, 12.0, 16.0, 0.0}, {6.85, 13.0, 13.0, 0.0}, {7.03, 9.0, 19.0, 0.0}, {7.16, 11.0, 19.0, 18.0}, {9.56, 16.0, 13.0, 19.0}, {9.11, 18.0, 18.0, 0.0}, {9.37, 12.0, 19.0, 17.0}, {14.78, 14.0, 14.0, 0.0}, {12.28, 11.0, 13.0, 19.0}, {6.61, 18.0, 19.0, 18.0}, {7.61, 11.0, 15.0, 17.0}, {2.76, 7.0, 8.0, 7.0}, {5.72, 15.0, 14.0, 15.0}, {5.14, 11.0, 13.0, 18.0}, {6.13, 15.0, 17.0, 19.0}, {7.18, 12.0, 0.0, 18.0}, {6.89, 11.0, 0.0, 19.0}, {8.77, 9.0, 0.0, 19.0}, {9.58, 13.0, 16.0, 18.0}, {6.92, 11.0, 17.0, 19.0}, {5.43, 9.0, 18.0, 18.0}, {9.7, 14.0, 15.0, 18.0}, {9.51, 11.0, 16.0, 13.0}, {5.67, 12.0, 11.0, 19.0}, {6.12, 15.0, 14.0, 17.0}, {5.99, 14.0, 0.0, 15.0}, {4.04, 14.0, 0.0, 20.0}, {6.36, 14.0, 0.0, 19.0}, {3.74, 12.0, 14.0, 14.0}};
            double[][] coefficients = {{0.0, 0.44144134616933833, 0.4176708651289019, 0.4253298699521646, 0.18932037956394712, 0.2942734592331415, 0.17720119994613817, 0.3293734313236362, 0.22819260664196012, 0.4593423507454085, 0.5004411928311951, 0.3562240993964767, 0.31068088044116454, 0.4134384149941955, 0.14214595054429532, 0.4444511007122202, 16.293240791766195, 0.144086560126163, 0.8677897495234046, 0.022223322146830763, 0.14568166766136148, 0.5003213086516584, 0.2709332721726835, 0.33052021991211256, 0.3550753980149287, 0.09140599149487853, 0.42567786100792243, 0.05902801849683096, 0.9243494454546304, 0.5407063445532615, 0.4049442572067028, 0.19971188625211092, 0.011740493297003801, 0.40758814368367524, 0.5089541749849738, 0.27323668687328057, 0.5033501528327624, 0.394676981905491, 0.387773433649227, 0.29523485476722694, 0.18222949850215833, 0.39719677061170544, 0.3340059389899732, -0.62526881058852, -0.19352256216403116, -0.7274632462742682, -2.6010829734682703, -0.5976911681028589, -4.454860840421286, -5.415933502908786, -0.09487970142038532, -0.3129730704966144, -0.0018630937601728792, -0.8022307111259449, -1.2621101864820878, -0.7095302047440469, -10.225246577131234, -0.0, -0.08809272145766354, -0.0, -0.6755688032292027, -0.0, -1.0284169283508968, -0.5844752700370621, -0.8452456169350399, -0.5323577368790822, -0.6967777062968691, -0.6294647194533709, -0.18240600733610238, -0.629505665665582, -0.18604745674952963, -0.2857943991679224, -0.35453623346098934, -0.34046076369445827, -0.8463144518360132, -0.14687141656146344, -0.49719475215571535, -0.4426749453200686, -0.49271914400348127, -0.5609901643392182, -0.3923928269057286, -0.27223475984020495, -0.3823508800873786, -0.7965704892610759, -0.48794519084198124, -0.5725338714326446, -0.5349066528360888, -0.7171323245204919, -0.512775061459366, -0.3878485690814557, -0.7080030481271159, -0.8799184034136518, -0.7468863920123981, -0.8883661213031376, -0.8838906534341573, -0.7051679931081855, -0.516397019794977, -1.0298324877414202, -0.6797126568327437, -0.35264968606704256, -0.41250812709732143, -0.4113904735744013, -0.4560247704878515, -0.8009959084235918, -0.4198803943607374, -0.493470784466194, -0.4966129228321417, -0.41753548305522104, -0.8831618909395755, -0.6827522473497021, -0.4290197070658539, -0.865842133945813, -0.7619947340220342, -0.5735955883498216, -0.7826538961544757}, {0.3159273626503879, 0.9619949444995337, 0.9106481022277869, 0.9272006313503192, 0.4079382988262152, 0.6732817128051521, 0.48242445288495467, 0.7157271419637742, 0.5011097111847387, 0.9990232407614186, 1.0903131606385512, 0.7808186901248546, 0.667542794199796, 0.8990794922926535, 0.27496928323238196, 0.9144528453921443, 0.9977956643996478, 0.7095180716265004, 0.3959644554892695, 0.04280205563621719, 0.0, 1.0895915520930652, 0.6523684246938777, 0.7303207881960311, 0.6760405758123058, 0.13067499406081837, 0.9221456952435898, 0.7480022931527402, 0.5664907969126147, 0.33444861501967593, 0.883173849357949, 0.42642856032534665, 0.021236114123732185, 0.88936025372571, 1.1098103539523199, 0.5866348220831284, 1.0961401391083954, 0.8596405418880139, 0.8442633636508735, 0.6866056558323248, 0.3879169833818708, 0.8651107139420203, 0.8293781313381858, 0.826368946844673, 0.1659973684114118, 0.9651056805775869, 0.0, 0.6595795359983542, 0.0, 1.0720519575600727, 0.9497233891602438, 0.0, 0.0, 0.7839441632594306, 1.1634676154682155, 0.8106713358019484, 0.4940240062002033, 0.14669439119789307, 0.785029365437555, 0.6359414386902627, 0.7962010172278461, 0.21252600992961387, 1.1105740826294968, 0.7495216516995944, -0.36070665260392654, -0.22777839469078254, -0.29774166525436147, -0.26862236985612603, -0.07927114917459603, -0.26744769439229005, -0.07959424506134707, -0.1216681166248978, -0.1510834450627737, -0.14448601655311655, -0.36143576845313524, -0.06327051183293365, -0.21325380494652738, -0.18904354009478075, -0.21035449445432458, -0.2390924390633384, -0.1677792511310231, -0.11651170223668321, -0.16297292742316039, -0.3401908879836387, -0.20863869968030185, -0.24458322547977324, -0.22903012364724465, -0.30608635207758605, -0.21921734200881482, -0.16560275643178676, -0.3029168701630509, -0.3756236664480009, -0.31908999817701217, -0.37953096047023804, -0.3776986936447735, -0.3012744721589363, -0.22048033043474013, -0.3792703231593067, -0.2899570817533645, -0.15129241390255735, -0.176083845812355, -0.1757127336600302, -0.19508778362805196, -0.34162608429560154, -0.17939477100969636, -0.21081085394653748, -0.21242604363640716, -0.17789927563289826, -0.37717258328067454, -0.2915761715376895, -0.1836071624508675, -0.3697491153107062, -0.32539598252546753, -0.24487763598581008, -0.3334035268503578}};
            double[] intercepts = {0.4896042575453311, -0.11152538121286933, -0.6204732272719529};
            int[] weights = {43, 21, 51};

            // Prediction:
            SVC clf = new SVC(3, 3, vectors, coefficients, intercepts, weights, "rbf", 0.25, 0.0, 3);
            int estimation = clf.predict(features);
            System.out.println(estimation);

        }
    }
}